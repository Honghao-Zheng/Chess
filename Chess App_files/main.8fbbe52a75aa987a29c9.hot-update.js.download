webpackHotUpdate("main",{

/***/ "./src/components/Game.jsx":
/*!*********************************!*\
  !*** ./src/components/Game.jsx ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(__react_refresh_utils__, __react_refresh_error_overlay__) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Board */ "./src/components/Board.jsx");
/* harmony import */ var _BoardWhiteSide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BoardWhiteSide */ "./src/components/BoardWhiteSide.jsx");
/* harmony import */ var _BoardBlackSide__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BoardBlackSide */ "./src/components/BoardBlackSide.jsx");
/* harmony import */ var _Algorithms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Algorithms */ "./src/components/Algorithms.jsx");
/* harmony import */ var _GeneralAlgorithms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GeneralAlgorithms */ "./src/components/GeneralAlgorithms.jsx");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__);
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");
__webpack_require__.$Refresh$.setup(module.i);

var _jsxFileName = "C:\\Users\\Home\\Desktop\\software engineering\\personal project\\Chess\\src\\components\\Game.jsx",
    _s = __webpack_require__.$Refresh$.signature();

//jshint esversion:6










let piecesArrangement = [["WR", "WN", "WB", "WQ", "WK", "WB", "WN", "WR"], ["WP", "WP", "WP", "WP", "WP", "WP", "WP", "WP"], [" ", " ", " ", " ", " ", " ", " ", " "], [" ", " ", " ", " ", " ", " ", " ", " "], [" ", " ", " ", " ", " ", " ", " ", " "], [" ", " ", " ", " ", " ", " ", " ", " "], ["BP", "BP", "BP", "BP", "BP", "BP", "BP", "BP"], ["BR", "BN", "BB", "BQ", "BK", "BB", "BN", "BR"]]; // let piecesArrangement=[
//                       ["WR"," "," "," "," "," "," "," "],
//                       [" ","WR"," "," "," "," "," "," "],
//                       [" "," "," "," "," "," "," "," "],
//                       [" "," "," "," "," "," "," "," "],
//                       [" "," "," "," "," "," "," "," "],
//                       [" "," "," "," "," "," "," "," "],
//                       [" "," "," "," "," "," "," "," "],
//                       [" "," ","BK"," "," "," "," "," "]
//                     ];

function Game() {
  _s();

  const [gameState, setSate] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({
    isWhiteTurn: true
  });
  const [pieceSelected, setPiece] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({
    coord: {
      row: null,
      col: null
    },
    piece: null,
    isSelected: false,
    possibleMoves: []
  });
  const [pieceMoved, setMoves] = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])({
    moveFrom: [],
    moveTo: []
  });

  function handleClick(clickedCellCoord) {
    let [rowCoord, colCoord] = clickedCellCoord;
    let selectedPiece = piecesArrangement[rowCoord][colCoord];
    let pieceColour = selectedPiece[0];
    let legalMoves = Object(_Algorithms__WEBPACK_IMPORTED_MODULE_4__["selectedPieceMoves"])(clickedCellCoord, piecesArrangement);
    let turn = gameState.isWhiteTurn ? "W" : "B";

    if (_Algorithms__WEBPACK_IMPORTED_MODULE_4__["whoWins"] !== null) {
      alert("Game over, " + _Algorithms__WEBPACK_IMPORTED_MODULE_4__["whoWins"] + " refresh the page to start a new game");
    }

    if (pieceColour == turn && pieceSelected.isSelected === false) {
      setPiece({
        coord: {
          row: rowCoord,
          col: colCoord
        },
        piece: selectedPiece,
        isSelected: true,
        possibleMoves: legalMoves
      });
    }

    if (pieceSelected.isSelected === true) {
      let moveFrom = [pieceSelected.coord.row, pieceSelected.coord.col];
      let moveTo = clickedCellCoord;
      let pieceMoved = pieceSelected.piece;
      let isMoved = Object(_Algorithms__WEBPACK_IMPORTED_MODULE_4__["makeLegalMove"])(pieceSelected.possibleMoves, moveFrom, moveTo, pieceMoved, piecesArrangement);

      if (isMoved) {
        setSate({
          isWhiteTurn: gameState.isWhiteTurn ? false : true
        });
        setMoves({
          moveFrom: moveFrom,
          moveTo: moveTo
        });
      }

      setPiece({
        coord: {
          row: null,
          col: null
        },
        piece: null,
        isSelected: false,
        possibleMoves: []
      });
    }
  }

  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("div", {
    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("div", {
      className: "game row",
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])(_Board__WEBPACK_IMPORTED_MODULE_1__["default"], {
        piecesArrangement: piecesArrangement,
        onClick: ([rowNum, colNum]) => handleClick([rowNum, colNum]),
        validMoves: pieceSelected.possibleMoves,
        clickedCell: [pieceSelected.coord.row, pieceSelected.coord.col],
        isWhiteTurn: gameState.isWhiteTurn,
        moveMade: pieceMoved
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 100,
        columnNumber: 11
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 99,
      columnNumber: 7
    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("div", {
      className: "game row",
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])(_BoardWhiteSide__WEBPACK_IMPORTED_MODULE_2__["default"], {
        piecesArrangement: piecesArrangement,
        onClick: ([rowNum, colNum]) => handleClick([rowNum, colNum]),
        validMoves: pieceSelected.possibleMoves,
        clickedCell: [pieceSelected.coord.row, pieceSelected.coord.col],
        isWhiteTurn: gameState.isWhiteTurn,
        moveMade: pieceMoved
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 110,
        columnNumber: 19
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 15
    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("div", {
      className: "game row",
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])(_BoardBlackSide__WEBPACK_IMPORTED_MODULE_3__["default"], {
        piecesArrangement: piecesArrangement,
        onClick: ([rowNum, colNum]) => handleClick([rowNum, colNum]),
        validMoves: pieceSelected.possibleMoves,
        clickedCell: [pieceSelected.coord.row, pieceSelected.coord.col],
        isWhiteTurn: gameState.isWhiteTurn,
        moveMade: pieceMoved
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 120,
        columnNumber: 23
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 19
    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("div", {
      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__["jsxDEV"])("h1", {
        children: ["Game result: ", _Algorithms__WEBPACK_IMPORTED_MODULE_4__["whoWins"], " "]
      }, void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 130,
        columnNumber: 14
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 11
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 98,
    columnNumber: 7
  }, this);
}

_s(Game, "+/V4Bj1ccK9/tVTsDjJ7wYixfHA=");

_c = Game;
/* harmony default export */ __webpack_exports__["default"] = (Game);

var _c;

__webpack_require__.$Refresh$.register(_c, "Game");

const currentExports = __react_refresh_utils__.getModuleExports(module.i);
__react_refresh_utils__.registerExportsForReactRefresh(currentExports, module.i);

if (true) {
  const isHotUpdate = !!module.hot.data;
  const prevExports = isHotUpdate ? module.hot.data.prevExports : null;

  if (__react_refresh_utils__.isReactRefreshBoundary(currentExports)) {
    module.hot.dispose(
      /**
       * A callback to performs a full refresh if React has unrecoverable errors,
       * and also caches the to-be-disposed module.
       * @param {*} data A hot module data object from Webpack HMR.
       * @returns {void}
       */
      function hotDisposeCallback(data) {
        // We have to mutate the data object to get data registered and cached
        data.prevExports = currentExports;
      }
    );
    module.hot.accept(
      /**
       * An error handler to allow self-recovering behaviours.
       * @param {Error} error An error occurred during evaluation of a module.
       * @returns {void}
       */
      function hotErrorHandler(error) {
        if (
          typeof __react_refresh_error_overlay__ !== 'undefined' &&
          __react_refresh_error_overlay__
        ) {
          __react_refresh_error_overlay__.handleRuntimeError(error);
        }

        if (typeof __react_refresh_test__ !== 'undefined' && __react_refresh_test__) {
          if (window.onHotAcceptError) {
            window.onHotAcceptError(error.message);
          }
        }

        __webpack_require__.c[module.i].hot.accept(hotErrorHandler);
      }
    );

    if (isHotUpdate) {
      if (
        __react_refresh_utils__.isReactRefreshBoundary(prevExports) &&
        __react_refresh_utils__.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)
      ) {
        module.hot.invalidate();
      } else {
        __react_refresh_utils__.enqueueUpdate(
          /**
           * A function to dismiss the error overlay after performing React refresh.
           * @returns {void}
           */
          function updateCallback() {
            if (
              typeof __react_refresh_error_overlay__ !== 'undefined' &&
              __react_refresh_error_overlay__
            ) {
              __react_refresh_error_overlay__.clearRuntimeErrors();
            }
          }
        );
      }
    }
  } else {
    if (isHotUpdate && __react_refresh_utils__.isReactRefreshBoundary(prevExports)) {
      module.hot.invalidate();
    }
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js"), __webpack_require__(/*! ./node_modules/react-dev-utils/refreshOverlayInterop.js */ "./node_modules/react-dev-utils/refreshOverlayInterop.js")))

/***/ })

})
//# sourceMappingURL=main.8fbbe52a75aa987a29c9.hot-update.js.map